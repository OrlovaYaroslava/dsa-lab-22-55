# triangle_func.py

# Исключение для некорректных сторон треугольника.
class IncorrectTriangleSides(Exception):
    pass


# Функция для определения типа треугольника по длинам его сторон.
# Принимает три параметра (a, b, c) — длины сторон треугольника.
# Возвращает строку, описывающую тип треугольника:
# "equilateral" (равносторонний), "isosceles" (равнобедренный), "nonequilateral" (разносторонний).
# Если параметры некорректны, выбрасывает исключение IncorrectTriangleSides.
def get_triangle_type(a, b, c):
    """
    Функция определяет тип треугольника по длинам его сторон.

    Параметры:
    a (float): длина первой стороны.
    b (float): длина второй стороны.
    c (float): длина третьей стороны.

    Возвращает:
    str: тип треугольника ("equilateral", "isosceles", "nonequilateral").

    Исключения:
    IncorrectTriangleSides: если хотя бы одна из сторон не положительна
    или не выполняется условие существования треугольника.
    """
    # Проверка на положительные значения сторон.
    # Если хотя бы одна из сторон отрицательна или равна нулю, выбрасывается исключение.
    if a <= 0 or b <= 0 or c <= 0:
        raise IncorrectTriangleSides("Стороны треугольника должны быть положительными числами.")

    # Проверка на возможность существования треугольника.
    # Если сумма любых двух сторон меньше или равна третьей, то треугольник не существует.
    if a + b <= c or a + c <= b or b + c <= a:
        raise IncorrectTriangleSides("Сумма любых двух сторон треугольника должна быть больше третьей.")

    # Определение типа треугольника:
    # Равносторонний треугольник — все стороны равны.
    if a == b == c:
        return "equilateral"

    # Равнобедренный треугольник — две стороны равны.
    elif a == b or b == c or a == c:
        return "isosceles"

    # Разносторонний треугольник — все стороны разные.
    else:
        return "nonequilateral"
